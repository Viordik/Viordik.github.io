{"version":3,"sources":["index.js"],"names":["Vue","el","data","speedStart","speedFinal","errorClass","textError","weight","revers","flaps","angleFlaps","angleFlapsClass","stateFlaps","slats","angleSlats","angleSlatsClass","stateSlats","runwayCoating","runwayState","total","watch","this","console","log","methods","calculation","allFieldValue","speed","computed","foto","camera","cameraSecond","$","slick","autoplay","autoplaySpeed","dots","infinite","fade","cssEase","mobileFirst"],"mappings":"aAoBA,IAAAA,IAAA,CACAC,GAAA,YACAC,KAAA,CACAC,WAAA,EACAC,WAAA,EACAC,WAAA,GACAC,UAAA,GACAC,OAAA,GACAC,OAAA,GACAC,MAAA,GACAC,WAAA,GACAC,gBAAA,GACAC,YAAA,EACAC,MAAA,GACAC,WAAA,GACAC,gBAAA,GACAC,YAAA,EACAC,cAAA,GACAC,YAAA,GACAC,MAAA,IAEAC,MAAA,CACAjB,WAAA,WACAkB,KAAAlB,YAAA,KACAkB,KAAAhB,WAAA,UACAgB,KAAAf,UAAA,6FACAgB,QAAAC,IAAA,gGAEAF,KAAAhB,WAAA,OACAgB,KAAAf,UAAA,oBACAgB,QAAAC,IAAA,uBAGAhB,OAAA,WACAe,QAAAC,IAAAF,KAAAd,SAEAC,OAAA,WACAc,QAAAC,IAAAF,KAAAb,SAEAC,MAAA,WACA,GAAAY,KAAAZ,OACAa,QAAAC,IAAAF,KAAAZ,OACAY,KAAAT,YAAA,EACAS,KAAAV,gBAAA,WACAU,KAAAX,WAAA,GACA,GAAAW,KAAAZ,QACAa,QAAAC,IAAAF,KAAAZ,OACAY,KAAAT,YAAA,EACAS,KAAAV,gBAAA,KAGAE,MAAA,WACA,GAAAQ,KAAAR,OACAQ,KAAAL,YAAA,EACAK,KAAAN,gBAAA,WACAM,KAAAP,WAAA,GACA,GAAAO,KAAAR,QACAQ,KAAAL,YAAA,EACAK,KAAAN,gBAAA,KAIAL,WAAA,WACAY,QAAAC,IAAAF,KAAAX,aAEAI,WAAA,WACAQ,QAAAC,IAAAF,KAAAP,aAEAG,cAAA,WACAK,QAAAC,IAAAF,KAAAJ,gBAEAC,YAAA,WACAI,QAAAC,IAAAF,KAAAH,eAGAM,QAAA,CACAC,YAAA,WACA,IAAAC,GAAAL,KAAAM,QAAAN,KAAAd,SAAAc,KAAAb,SAAAa,KAAAX,aAAAW,KAAAP,aAAAO,KAAAH,YACA,OAAAG,KAAAF,MAAAO,IAGAE,SAAA,CACAD,MAAA,WACA,OAAAN,KAAAlB,WAAA,OAgGA,IAAA0B,KAAA,IAAA7B,IAAA,CACAC,GAAA,QACAC,KAAA,CACA4B,OAAA,uBACAC,aAAA,iBAQAC,EAAA,wBAAAC,MAAA,CACAC,UAAA,EACAC,cAAA,IACAC,MAAA,EACAC,UAAA,EACAV,MAAA,IACAW,MAAA,EACAC,QAAA,SACAC,aAAA","file":"script.min.js","sourcesContent":["// 'use strict'\n\n// Расчет посадочной скорости путем получение значения из поля скорость захода на посадку\n// const approachSpeed = document.querySelector('#approach-speed');\n// const landingSpeed = document.querySelector('#landing-speed');\n// const error = document.querySelector('.error-block');\n// const difference = 20;\n\n// (function () {\n//   approachSpeed.addEventListener('change', function () {\n//     if (approachSpeed.value <= 150) {\n//       error.innerHTML = ('<p class=\"error error--warning\">Число не должно быть меньше или равно 150!</p>');\n//       console.log('Число не должно быть меньше или равно 150');\n//     } else {\n//       error.innerHTML = ('<p class=\"error error--good\">Корректные данные</p>');\n//       landingSpeed.value = approachSpeed.value - difference;\n//     };\n//   });\n// })();\n\nnew Vue({\n  el: '#airplane',\n  data: {\n    speedStart: 0,\n    speedFinal: 0,\n    errorClass: '',\n    textError: '',\n    weight: '',\n    revers: '',\n    flaps: '',\n    angleFlaps: '',\n    angleFlapsClass: '',\n    stateFlaps: false,\n    slats: '',\n    angleSlats: '',\n    angleSlatsClass: '',\n    stateSlats: false,\n    runwayCoating: '',\n    runwayState: '',\n    total: ''\n  },\n  watch: {\n    speedStart: function () {\n      if (this.speedStart <= 150) {\n        this.errorClass = 'warning';\n        this.textError = 'Введенное значение в поле \"Скорость захода на посадку\" не должно быть меньше или равно 150';\n        console.log('Введенное значение в поле \"Скорость захода на посадку\" не должно быть меньше или равно 150');\n      } else {\n        this.errorClass = 'good';\n        this.textError = 'Корректные данные';\n        console.log('Корректные данные');\n      }\n    },\n    weight: function () {\n      console.log(this.weight);\n    },\n    revers: function () {\n      console.log(this.revers);\n    },\n    flaps: function () {\n      if (this.flaps == 0) {\n        console.log(this.flaps);\n        this.stateFlaps = true;\n        this.angleFlapsClass = 'disabled';\n        this.angleFlaps = 0;\n      } else if (this.flaps == 1) {\n        console.log(this.flaps);\n        this.stateFlaps = false;\n        this.angleFlapsClass = '';\n      }\n    },\n    slats: function () {\n      if (this.slats == 0) {\n        this.stateSlats = true;\n        this.angleSlatsClass = 'disabled';\n        this.angleSlats = 0;\n      } else if (this.slats == 1) {\n        this.stateSlats = false;\n        this.angleSlatsClass = '';\n      }\n\n    },\n    angleFlaps: function () {\n      console.log(this.angleFlaps);\n    },\n    angleSlats: function () {\n      console.log(this.angleSlats);\n    },\n    runwayCoating: function () {\n      console.log(this.runwayCoating);\n    },\n    runwayState: function () {\n      console.log(this.runwayState);\n    }\n  },\n  methods: {\n    calculation: function () {\n      const allFieldValue = ((+this.speed) + (+this.weight) + (+this.revers) + (+this.angleFlaps) + (+this.angleSlats) + (+this.runwayState));\n      return this.total = allFieldValue;\n    }\n  },\n  computed: {\n    speed: function () {\n      return this.speedStart - 20;\n    },\n  },\n});\n\n\n// Получения значения массы самолета\n// const weight = document.getElementById('weight-select');\n\n\n// weight.addEventListener('change', function() {\n//   const x = weight.options[weight.selectedIndex].value;\n//   console.log(x);\n//   return x;\n// });\n\n// Значения реверса, если два двигателся работают то оно равно 12000, если один то 6000, если оба не работают то 0\n// const revers = document.getElementById('engines-select');\n\n// revers.addEventListener('change', function() {\n//   const l = revers.options[revers.selectedIndex].value;\n//   console.log(l);\n//   return l;\n// });\n\n// Работоспоспособность закрылков и получения значения из поля угол отклонения закрылков\n// const flaps = document.getElementById('flaps');\n// const angleFlaps = document.getElementById('angle-flaps');\n\n// console.log(flaps);\n// console.log(angleFlaps);\n\n\n// flaps.addEventListener('change', function () {\n//   if (flaps.value == '1') {\n//     angleFlaps.removeAttribute('disabled', 'disabled');\n//     angleFlaps.classList.remove('disabled');\n//     console.log('Жмакс')\n//   }\n\n//   if (flaps.value == '0') {\n//     angleFlaps.setAttribute('disabled', 'disabled');\n//     angleFlaps.classList.add('disabled');\n//     console.log('Все плохо!');\n//   }\n// });\n\n\n// angleFlaps.addEventListener('change', function () {\n//   const f = angleFlaps.options[angleFlaps.selectedIndex].value;\n//   console.log(f);\n//   return f;\n// });\n\n\n// Работоспоспособность предкрылков и получение значения угла отклонения предкрылков\n// const slats = document.getElementById('slats');\n// const angleSlats = document.getElementById('angle-slats');\n\n// console.log(flaps);\n// console.log(angleFlaps);\n\n\n// slats.addEventListener('change', function () {\n//   if (slats.value == '1') {\n//     angleSlats.removeAttribute('disabled', 'disabled');\n//     angleSlats.classList.remove('disabled');\n//     console.log('Жмакс')\n//   }\n\n//   if (slats.value == '0') {\n//     angleSlats.setAttribute('disabled', 'disabled');\n//     angleSlats.classList.add('disabled');\n//     console.log('Все плохо!');\n//   }\n// });\n\n// angleSlats.addEventListener('change', function () {\n//   const s = angleSlats.options[angleSlats.selectedIndex].value;\n//   console.log(s);\n//   return s;\n// });\n\n\n// Получение значени из поля Покрытие ВПП\n// const coating = document.getElementById('coating');\n\n// coating.addEventListener('change', function () {\n//   const c = coating.options[coating.selectedIndex].value;\n//   console.log(c);\n//   return c;\n// });\n\n\n\n\nconst foto = new Vue({\n  el: '#foto',\n  data: {\n    camera: 'Sony Alpha DSLR-A390',\n    cameraSecond: 'Nikon D7500'\n  }\n});\n\n\n\n\n(function () {\n  $('.foto-block__carusel').slick({\n    autoplay: true,\n    autoplaySpeed: 2000,\n    dots: true,\n    infinite: true,\n    speed: 500,\n    fade: true,\n    cssEase: 'linear',\n    mobileFirst: true,\n  });\n})();\n"]}